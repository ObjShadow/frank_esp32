/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/packet.proto */

#ifndef PROTOBUF_C_proto_2fpacket_2eproto__INCLUDED
#define PROTOBUF_C_proto_2fpacket_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Audio Audio;
typedef struct Text Text;
typedef struct Command Command;
typedef struct DeviceInfo DeviceInfo;
typedef struct Packet Packet;
typedef struct Packet__Head Packet__Head;


/* --- enums --- */

typedef enum _MessageType {
  MESSAGE_TYPE__MESSAGE_TYPE_AUDIO = 0,
  MESSAGE_TYPE__MESSAGE_TYPE_TEXT = 1,
  MESSAGE_TYPE__MESSAGE_TYPE_COMMAND = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE)
} MessageType;
typedef enum _Commands {
  COMMANDS__COMMANDS_CLEAR_HISTORY = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COMMANDS)
} Commands;

/* --- messages --- */

struct  Audio
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
  uint32_t sample_rate;
  uint32_t channels;
};
#define AUDIO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&audio__descriptor) \
, {0,NULL}, 0, 0 }


struct  Text
{
  ProtobufCMessage base;
  char *text;
};
#define TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&text__descriptor) \
, NULL }


struct  Command
{
  ProtobufCMessage base;
  Commands command;
};
#define COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&command__descriptor) \
, COMMANDS__COMMANDS_CLEAR_HISTORY }


struct  DeviceInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_display_height;
  int32_t display_height;
  protobuf_c_boolean has_display_width;
  int32_t display_width;
  protobuf_c_boolean has_play_sample_rate;
  uint32_t play_sample_rate;
  protobuf_c_boolean has_play_bps;
  uint32_t play_bps;
  protobuf_c_boolean has_play_channels;
  uint32_t play_channels;
};
#define DEVICE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_info__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  Packet__Head
{
  ProtobufCMessage base;
  int32_t version;
  MessageType type;
  DeviceInfo *device_info;
};
#define PACKET__HEAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&packet__head__descriptor) \
, 0, MESSAGE_TYPE__MESSAGE_TYPE_AUDIO, NULL }


typedef enum {
  PACKET__BODY__NOT_SET = 0,
  PACKET__BODY_AUDIO = 2,
  PACKET__BODY_TEXT = 3,
  PACKET__BODY_COMMAND = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PACKET__BODY__CASE)
} Packet__BodyCase;

struct  Packet
{
  ProtobufCMessage base;
  Packet__Head *head;
  Packet__BodyCase body_case;
  union {
    Audio *audio;
    Text *text;
    Command *command;
  };
};
#define PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&packet__descriptor) \
, NULL, PACKET__BODY__NOT_SET, {0} }


/* Audio methods */
void   audio__init
                     (Audio         *message);
size_t audio__get_packed_size
                     (const Audio   *message);
size_t audio__pack
                     (const Audio   *message,
                      uint8_t             *out);
size_t audio__pack_to_buffer
                     (const Audio   *message,
                      ProtobufCBuffer     *buffer);
Audio *
       audio__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   audio__free_unpacked
                     (Audio *message,
                      ProtobufCAllocator *allocator);
/* Text methods */
void   text__init
                     (Text         *message);
size_t text__get_packed_size
                     (const Text   *message);
size_t text__pack
                     (const Text   *message,
                      uint8_t             *out);
size_t text__pack_to_buffer
                     (const Text   *message,
                      ProtobufCBuffer     *buffer);
Text *
       text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   text__free_unpacked
                     (Text *message,
                      ProtobufCAllocator *allocator);
/* Command methods */
void   command__init
                     (Command         *message);
size_t command__get_packed_size
                     (const Command   *message);
size_t command__pack
                     (const Command   *message,
                      uint8_t             *out);
size_t command__pack_to_buffer
                     (const Command   *message,
                      ProtobufCBuffer     *buffer);
Command *
       command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   command__free_unpacked
                     (Command *message,
                      ProtobufCAllocator *allocator);
/* DeviceInfo methods */
void   device_info__init
                     (DeviceInfo         *message);
size_t device_info__get_packed_size
                     (const DeviceInfo   *message);
size_t device_info__pack
                     (const DeviceInfo   *message,
                      uint8_t             *out);
size_t device_info__pack_to_buffer
                     (const DeviceInfo   *message,
                      ProtobufCBuffer     *buffer);
DeviceInfo *
       device_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_info__free_unpacked
                     (DeviceInfo *message,
                      ProtobufCAllocator *allocator);
/* Packet__Head methods */
void   packet__head__init
                     (Packet__Head         *message);
/* Packet methods */
void   packet__init
                     (Packet         *message);
size_t packet__get_packed_size
                     (const Packet   *message);
size_t packet__pack
                     (const Packet   *message,
                      uint8_t             *out);
size_t packet__pack_to_buffer
                     (const Packet   *message,
                      ProtobufCBuffer     *buffer);
Packet *
       packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   packet__free_unpacked
                     (Packet *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Audio_Closure)
                 (const Audio *message,
                  void *closure_data);
typedef void (*Text_Closure)
                 (const Text *message,
                  void *closure_data);
typedef void (*Command_Closure)
                 (const Command *message,
                  void *closure_data);
typedef void (*DeviceInfo_Closure)
                 (const DeviceInfo *message,
                  void *closure_data);
typedef void (*Packet__Head_Closure)
                 (const Packet__Head *message,
                  void *closure_data);
typedef void (*Packet_Closure)
                 (const Packet *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    message_type__descriptor;
extern const ProtobufCEnumDescriptor    commands__descriptor;
extern const ProtobufCMessageDescriptor audio__descriptor;
extern const ProtobufCMessageDescriptor text__descriptor;
extern const ProtobufCMessageDescriptor command__descriptor;
extern const ProtobufCMessageDescriptor device_info__descriptor;
extern const ProtobufCMessageDescriptor packet__descriptor;
extern const ProtobufCMessageDescriptor packet__head__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2fpacket_2eproto__INCLUDED */
